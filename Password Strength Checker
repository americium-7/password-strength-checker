import re

def evaluate_password_strength(password):
    if not password or not isinstance(password, str):
        return {
            'strength': 'Very Weak',
            'score': 0,
            'suggestions': ['Password cannot be empty']
        }
    
    common_passwords = [
        'password', '123456', '12345678', '1234', 'qwerty', 
        'letmein', 'admin', 'welcome', 'abc123', 'password1'
    ]
    
    metrics = {
        'length': len(password),
        'has_upper': bool(re.search(r'[A-Z]', password)),
        'has_lower': bool(re.search(r'[a-z]', password)),
        'has_digit': bool(re.search(r'[0-9]', password)),
        'has_special': bool(re.search(r'[^A-Za-z0-9]', password)),
        'is_common': password.lower() in common_passwords,
        'unique_chars': len(set(password)) / len(password) if password else 0
    }
    
    score = 0
    
    score += min(40, metrics['length'] * 2)
    
    if metrics['has_upper']: score += 5
    if metrics['has_lower']: score += 5
    if metrics['has_digit']: score += 10
    if metrics['has_special']: score += 20
    
    score += min(20, metrics['unique_chars'] * 20)
    
   
    if metrics['is_common']: score = max(0, score - 50)
    if metrics['length'] < 8: score = max(0, score - 20)
    
    if score >= 80:
        strength = 'Very Strong'
    elif score >= 60:
        strength = 'Strong'
    elif score >= 40:
        strength = 'Moderate'
    elif score >= 20:
        strength = 'Weak'
    else:
        strength = 'Very Weak'
    
    suggestions = []
    if metrics['length'] < 12:
        suggestions.append("Use at least 12 characters")
    if not metrics['has_upper']:
        suggestions.append("Add uppercase letters")
    if not metrics['has_lower']:
        suggestions.append("Add lowercase letters")
    if not metrics['has_digit']:
        suggestions.append("Add numbers")
    if not metrics['has_special']:
        suggestions.append("Add special characters (!@#$%^&*)")
    if metrics['is_common']:
        suggestions.append("Avoid common passwords")
    if metrics['unique_chars'] < 0.6:
        suggestions.append("Use more unique characters")
    
    return {
        'strength': strength,
        'score': min(100, max(0, score)),  
        **metrics,
        'suggestions': suggestions
    }


if __name__ == "__main__":
    test_passwords = [
        "password",
        "123456",
        "Secret123",
        "Very$tr0ngP@ss!",
        "mediumPass1",
        "short",
        "ThisIsALongPasswordWithNoNumbers",
        "C0mpl3x!tyM@tters"
    ]
    
    print("Password Strength Evaluator")
    print("="*50)
    for pwd in test_passwords:
        result = evaluate_password_strength(pwd)
        print(f"\nPassword: {pwd}")
        print(f"Strength: {result['strength']} ({result['score']}/100)")
        print(f"Length: {result['length']}")
        print("Contains: ", end="")
        print("Uppercase " if result['has_upper'] else "", end="")
        print("Lowercase " if result['has_lower'] else "", end="")
        print("Digits " if result['has_digit'] else "", end="")
        print("Special " if result['has_special'] else "", end="")
        print("\nSuggestions:")
        for suggestion in result['suggestions']:
            print(f"- {suggestion}")
        print("="*50)